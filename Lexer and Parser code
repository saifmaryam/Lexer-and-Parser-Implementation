class Lexer:
    """Converts input code into tokens."""
    def __init__(self, input_code):
        self.input_code = input_code  # The raw input string to be tokenized
        self.tokens = []  # List to store the generated tokens

    def tokenize(self):
        """Breaks the input code into a list of tokens."""
        current_token = ""  # Temporary storage for multi-digit numbers
        for char in self.input_code:
            if char.isspace():
                # Skip whitespace characters
                continue
            elif char in "+-*/()":
                # If a symbol is encountered, finalize the current token (if any)
                if current_token:
                    self.tokens.append(current_token)
                    current_token = ""
                # Add the symbol as a separate token
                self.tokens.append(char)
            elif char.isdigit() or char == '.':
                # Build multi-digit numbers or handle decimal numbers
                current_token += char
            else:
                # Ignore invalid characters instead of raising an error
                print(f"Warning: Ignored invalid character: {char}")
        if current_token:
            # Append the last token if present
            self.tokens.append(current_token)
        return self.tokens  # Return the list of tokens


class Parser:
    """Parses tokens into a syntax tree."""
    def __init__(self, tokens):
        self.tokens = tokens  # List of tokens generated by the lexer
        self.current_index = 0  # Index to track the current token being processed

    def parse_expression(self):
        """Parses addition and subtraction expressions."""
        num = self.parse_term()  # Start by parsing a term (multiplication or division)
        while self.current_index < len(self.tokens) and self.tokens[self.current_index] in "+-":
            operator = self.tokens[self.current_index]  # Get the operator ('+' or '-')
            self.current_index += 1  # Move to the next token
            next_num = self.parse_term()  # Parse the next term
            num = f"({num} {operator} {next_num})"  # Combine into a sub-expression
        return num

    def parse_term(self):
        """Parses multiplication and division expressions."""
        num = self.parse_factor()  # Start by parsing a factor (number or sub-expression)
        while self.current_index < len(self.tokens) and self.tokens[self.current_index] in "*/":
            operator = self.tokens[self.current_index]  # Get the operator ('*' or '/')
            self.current_index += 1  # Move to the next token
            next_num = self.parse_factor()  # Parse the next factor
            num = f"({num} {operator} {next_num})"  # Combine into a sub-expression
        return num

    def parse_factor(self):
        """Parses a number or a parenthesized sub-expression."""
        token = self.tokens[self.current_index]  # Get the current token
        self.current_index += 1  # Move to the next token
        if token.replace('.', '', 1).isdigit():
            # If the token is a number (including decimals), return it directly
            return token
        elif token == "(":
            # If the token is '(', parse the inner expression
            num = self.parse_expression()
            if self.tokens[self.current_index] != ")":
                # Ensure the closing parenthesis exists
                raise ValueError("Missing closing parenthesis")
            self.current_index += 1  # Move past the closing parenthesis
            return num
        else:
            # Raise an error for unexpected tokens
            raise ValueError(f"Unexpected token: {token}")

    def parse(self):
        """Starts the parsing process and ensures all tokens are consumed."""
        result = self.parse_expression()  # Parse the full expression
        if self.current_index != len(self.tokens):
            # If there are leftover tokens, raise an error
            raise ValueError("Unexpected tokens at the end")
        return result


class Evaluator:
    """Evaluates the parse tree to calculate the result."""
    @staticmethod
    def evaluate(expression):
        """Evaluates a mathematical expression represented as a string."""
        try:
            return eval(expression)  # Use Python's eval to compute the result
        except Exception as e:
            raise ValueError(f"Error evaluating expression: {e}")


# Main Program
if __name__ == "__main__":
    while True:  # Loop to allow multiple expressions until exit condition
        print("Enter any type of expression (or type 'exit' to quit):")
        input_expression = input()  # Take user input

        if input_expression.lower() == "exit":
            print("Exiting the program. Thanks!")
            break  # Exit the loop and terminate the program

        try:
            # Lexer Step
            lexer = Lexer(input_expression)  # Initialize the lexer with the input
            tokens = lexer.tokenize()  # Generate tokens
            print(f"Tokens: {tokens}")  # Display the tokens

            # Parser Step
            parser = Parser(tokens)  # Initialize the parser with the tokens
            parse_tree = parser.parse()  # Generate the parse tree
            print(f"Parse Tree: {parse_tree}")  # Display the parse tree

            # Evaluator Step
            result = Evaluator.evaluate(input_expression)  # Calculate the result
            print(f"Result: {result}")  # Display the final result

        except ValueError as e:
            # Handle any errors during tokenization, parsing, or evaluation
            print(f"Error: {e}")
